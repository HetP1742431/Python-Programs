# -----------------------------------------------------------------------------------------------------------
# Name: Het Bharatkumar Patel
# SID: 1742431
# CCID: hetbhara
# AnonID: 1000348298
# CMPUT 274, Fall 2022
# Assessment: Weekly Exercise 02 - Unfair Dice
# -----------------------------------------------------------------------------------------------------------
import random
def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.
    """

    random.seed(s) 
    rolls = []
    for i in range(n):
        prob = 0
        rand_number = random.random() 
        for k in range(len(prob_list)):
            prob = prob + prob_list[k]
            if rand_number < prob:
                x = k + 1
                break
        rolls.append(x)
    return rolls
    
def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """

    print("Frequency Histogram: %(m)d-sided Die" % {"m":m})
    frequency_list = [0]*m
    hyphen_list = [0]*m

    for j in rolls:
        frequency_list[j-1] = frequency_list[j-1] + 1

    scaled_length = width/max(frequency_list)

    for l in range(0,m):
        frequency_list[l] = round(frequency_list[l]*scaled_length)
        hyphen_list[l] = width - frequency_list[l]
        print(str(l+1) + "." , "#"*frequency_list[l] + "-"*hyphen_list[l])

if __name__ == "__main__":
     # Any code indented under this line will only be run
     # when the program is called directly from the terminal
     # using "python3 unfairDice.py". This can be useful for
     # testing your implementations.
    rolls = biased_rolls([1/12, 1/4, 1/3, 1/12, 1/12, 1/6], (2**32)-1, 20)
    print(rolls)
    draw_histogram(6, rolls, 50)

    rolls = biased_rolls([1/4, 1/6, 1/12, 1/12, 1/4, 1/6], 42, 200)
    draw_histogram(6, rolls, 10)

    
    rolls = biased_rolls([1/3, 1/3, 1/3], (2**32)-1, 1000)
    draw_histogram(3, rolls, 10)
    pass
